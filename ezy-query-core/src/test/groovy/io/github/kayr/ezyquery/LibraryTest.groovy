/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package io.github.kayr.ezyquery

import io.github.kayr.ezyquery.parser.ExprParser
import io.github.kayr.ezyquery.parser.EzyParseException
import org.junit.Ignore
import spock.lang.Specification

class LibraryTest extends Specification {


    def 'test parsing expression'() {

        when:
        def expr = '''
'string constant' = 9  
and (-9.8 or 8 + 7 - 2 * 3 / 4 % 5) 
and (8 > 9) and (100 >= 100)
and (8 < 9) and (100 <= 100)
and (11 <> 90) or (11 != 91)
or (name like '%john%') and (name not like '%doe%')
or (name in (john, doe, 'xxx')) and (name NOT IN (doe, 'xxx'))
or (9 + 3) NOT IN (9, 3)
 '''
        def result = ExprParser.parseExpr(expr).toString()

        then:
        result.trim() == "'string constant' = 9 " +
                "AND (-9.8 OR 8 + 7 - 2 * 3 / 4 % 5) " +
                "AND (8 > 9) AND (100 >= 100) AND (8 < 9) " +
                "AND (100 <= 100) AND (11 <> 90) OR (11 <> 91) " +
                "OR (#name LIKE '%john%') AND (#name NOT LIKE '%doe%') " +
                "OR (#name in [#john, #doe, 'xxx']) AND (#name not in [#doe, 'xxx']) " +
                "OR (9 + 3) not in [9, 3]\n".trim()
    }

    def 'test other operators'() {

        when:
        def expr = '''
9 between 1 and 10 or 9 not between 1 and 10
and 9 is null or 9 is not null
 '''
        def result = ExprParser.parseExpr(expr).toString()

        then:
        result.trim() == "9 between 1 and 10 OR 9 not between 1 and 10 AND 9 is null OR 9 is not null"
    }

    @spock.lang.Ignore
    def xxxxxxxxxxxxxxxx() {

        when:
        def expr = '''
9 between 1 and 10 or 9 not between 1 and 10
and 9 is null or 9 is not null and from is null
 '''
        def result = ExprParser.parseExpr(expr).toString()

        then:
        result.trim() == "9 BETWEEN 1 AND 10 OR 9 NOT BETWEEN 1 AND 10 AND 9 is null OR 9 is not null"
    }

    def 'test up support operators operators'() {


        when:
        def expr = '''
id = 9 and name = 'john' or name += 'doe' '''
        def result = ExprParser.parseExpr(expr).toString()

        then:
        EzyParseException e = thrown()
        e.message.startsWith("Failed to parse statement: could only parse partial expression")
    }

    def 'test up support operators operators2'() {

        when:
        def expr = '''
id = 9 and name = 'john' or substring(name) '''
        def result = ExprParser.parseExpr(expr).toString()

        then:
        EzyParseException e = thrown()
        e.message.startsWith("UnSupported Expression: [Function]:")
    }
}
